@page "/workflow/{workflowid:guid}/{taskid:guid}"

@using Domain.Dtos;
@using Application;
@using Application.Colony;

@inject ITimer Timer
@inject Colony Colony

<h3>Task</h3>

<div>
    @foreach (var message in _messages)
    {
        @if (message.Type == Domain.Dtos.MessageType.Error)
        {
            <pre style="color: #721c24">@message.ToString()</pre>
        }
        else
        {
            <pre>@message.ToString()</pre>
        }
    }
</div>

@code {
    [Parameter]
    public Guid WorkflowId { get; set; }

    [Parameter]
    public Guid TaskId { get; set; }

    private List<TaskMessageDto> _messages = new List<TaskMessageDto>();

    protected async override Task OnParametersSetAsync()
    {
        _messages = await Colony.FetchTaskMessagesAsync(WorkflowId, TaskId);

        Timer.Updated -= OnTimerTick;
        Timer.Updated += OnTimerTick;

        await base.OnParametersSetAsync();
    }

    private void OnTimerTick()
    {
        InvokeAsync(async () =>
        {
            _messages = await Colony.FetchTaskMessagesAsync(WorkflowId, TaskId);
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Timer.Updated -= OnTimerTick;
    }
}
