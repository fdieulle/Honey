@page "/workflow/{workflowid:guid}/{colonytaskid:guid}/{beetaskid:guid}"

@using Domain.Dtos;
@using Application;
@using Application.Colony;
@using System.Text.Json;
@using System.Net.Http.Headers;

@inject ITimer Timer
@inject Colony Colony
@inject BeeKeeper BeeKeeper

<h3>Task</h3>

<div>
    @foreach (var message in _messages)
    {
        @message<br />
        @*@if (message.Type == Domain.Dtos.MessageType.Error)
        {
            <pre style="color: #721c24">@message.ToString()</pre>
        }
        else
        {
            <pre>@message.ToString()</pre>
        }*@
    }
</div>

@code {
    [Parameter]
    public Guid WorkflowId { get; set; }

    [Parameter]
    public Guid ColonyTaskId { get; set; }

    [Parameter]
    public Guid BeeTaskId { get; set; }

    private IBee _bee;
    private readonly List<string> _messages = new List<string>();

    protected async override Task OnParametersSetAsync()
    {
        var address = Colony.GetBeeAddress(WorkflowId, ColonyTaskId);
        _bee = BeeKeeper.GetBee(address);
        await Update();

        //Timer.Updated -= OnTimerTick;
        //Timer.Updated += OnTimerTick;

        await base.OnParametersSetAsync();
    }

    private async Task Update()
    {
        if (_bee == null) return;
        var lines = await _bee.FetchLogsAsync(BeeTaskId, _messages.Count, 1000);
        if (lines != null)
            _messages.AddRange(lines);
    }

    private void OnTimerTick()
    {
        InvokeAsync(async () =>
        {
            await Update();
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        Timer.Updated -= OnTimerTick;
    }
}
