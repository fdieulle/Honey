@page "/bees"

@using AntDesign
@using Domain.Dtos
@using Application
@using Application.Colony
@using Domain.ViewModels;

@inject BeeKeeper BeeKeeper
@inject ITimer Timer

<h3>Bees</h3>

<Space>
    <SpaceItem><Button Type="@ButtonType.Primary" OnClick="@(()=>{ _isVisible = true; })">New Bee</Button></SpaceItem>
</Space>

<Modal Title="New Bee"
       Visible="@_isVisible"
       Footer="@null">
       <Form Model="@_newBee"
             OnFinish="@Enroll"
             OnFinishFailed="@EnrollmentFailed">
            <FormItem Label="Url">
                <Input @bind-Value="@context.Address" />
            </FormItem>
            
            <Divider />
            <Row Justify="end">
                <Col Span="4">
                    <FormItem>
                        <Button Type="@ButtonType.Primary" HtmlType="submit">
                            Enroll
                        </Button>
                    </FormItem>
                </Col>
                <Col Span="4">
                    <FormItem>
                        <Button OnClick="()=>CancelEnrollment()">Cancel</Button>
                    </FormItem>
                </Col>
            </Row>
       </Form>
</Modal>
<Modal Title="@($"Confirm {_modalState.Purpose}")"
       Visible="@_modalState.IsVisible"
       OkText="@("Confirm")" OnOk="@_modalState.Accept"
       CancelText="@("Cancel")" OnCancel="@_modalState.Cancel">
    <p>Do you want to @_modalState.Purpose ?</p>
</Modal>

<AntDesign.Table 
    TItem="BeeDto"
    DataSource="@_bees"   
>
    <Column Title="OS" Field="@context.OS">
        <Image Preview=false Width="25px" Src="@GetOSImage(context.OS)" />
    </Column>
    <Column Title="Active" @bind-Field="@context.IsUp" Sortable>
        <Switch Value="@context.IsUp" Disabled />
    </Column>
    <Column Title="Name" @bind-Field="@context.Address" Sortable>
        <a href="@($"{context.Address}/swagger/index.html")" target="_blank">@context.Address</a>
    </Column>
    <Column Title="Cores %" @bind-Field="@context.PercentFreeCores" Sortable>
        <Progress Percent="@(Math.Round(100.0 - context.PercentFreeCores))" Type=ProgressType.Line StrokeColor=@GetColor(context.PercentFreeCores) />
    </Column>
    <Column Title="RAM %" @bind-Field="@context.PercentFreeMemory" Sortable>
        <Progress Percent="@(Math.Round(100.0 - @context.PercentFreeMemory, 2))" Type=ProgressType.Line StrokeColor="@GetColor(context.PercentFreeMemory)" />
    </Column>
    <Column Title="Disk %" @bind-Field="@context.PercentFreeDiskSpace" Sortable>
        <Progress Percent="@(Math.Round(100.0 - @context.PercentFreeDiskSpace, 2))" Type=ProgressType.Line StrokeColor=@GetColor(context.PercentFreeDiskSpace) />
    </Column>
    <ActionColumn>
        <Space>
            <SpaceItem><Button Danger OnClick="()=>Delete(context.Address)">Delete</Button></SpaceItem>
        </Space>
    </ActionColumn>

</AntDesign.Table>

@code {
    List<BeeDto> _bees = new List<BeeDto>();
    bool _isVisible;
    BeeDto _newBee = new BeeDto();
    private readonly ModalViewModel _modalState = new ModalViewModel();

    protected override async Task OnInitializedAsync()
    {
        Timer.Updated += Updated;
        _bees = await BeeKeeper.GetBeesAsync();
    }

    private void Updated()
    {
        InvokeAsync(StateHasChanged);
    }

    private async void Enroll(EditContext editContext)
    {
        if (!await BeeKeeper.EnrollBeeAsync(_newBee.Address))
        {
            // Todo: Handle the error
            return;
        }

        _isVisible = false;

        _bees = await BeeKeeper.GetBeesAsync();
        StateHasChanged();
    }

    private void EnrollmentFailed(EditContext editContext)
    {

    }

    private void CancelEnrollment()
    {
        _isVisible = false;
    }

    private void Delete(string name)
    {
        _modalState.Purpose = $"delete {name}";
        _modalState.Show(async () =>
        {
            await BeeKeeper.RevokeBeeAsync(name);

            _bees = await BeeKeeper.GetBeesAsync();
            StateHasChanged();
        });
    }

    string GetColor(double percentFree)
    {
        if (percentFree <= 10) return "#dc3545";
        if (percentFree <= 25) return "#fd7e14";
        return "#28a745";
    }

    string GetOSImage(string platform)
    {
        switch(platform)
        {
            case "Win32S":
            case "Win32Windows":
            case "Win32NT":
            case "WinCE":
                return "images/windows_microsoft_icon.png";
            case "Unix":
                return "images/tux_linux_icon.png";
            case "MacOSX":
                return "images/mac_osx_icon.png";
            case "Xbox":
                return "images/xbox_icon.png";
            default:
                return "images/server_center_data_icon.png";
        }
    }

    public void Dispose()
    {
        Timer.Updated -= Updated;
    }
}
