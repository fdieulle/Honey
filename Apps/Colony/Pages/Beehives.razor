@page "/beehives"

@using AntDesign
@using AntDesign.TableModels
@using Application
@using Application.Colony
@using Domain.Dtos
@using Domain.ViewModels;

@inject BeehiveProvider BeehiveProvider
@inject BeeKeeper BeeKeeper

<h3>Beehives</h3>

<Space>
    <SpaceItem><Button Type="@ButtonType.Primary" OnClick="@NewBeehive">New</Button></SpaceItem>
</Space>

<Modal Title="New Beehive"
       Visible="@_isVisible"
       Closable="false"
       Footer="@null">
    <Form Model="@_model"
          OnFinish="@AddBeehive"
          OnFinishFailed="@AddBeehiveFailed"
          Layout="Vertical">
        <FormItem Label="Name">
            <Input @bind-Value="@context.Name" />
        </FormItem>
        <FormItem Label="Max number of parallel tasks" Help="A value <= 0 means no restrictions.">
            <AntDesign.InputNumber @bind-Value="@context.MaxParallelTasks" />
        </FormItem>
        <FormItem Label="Bees" Help="No selection means allowing the beehive to run on all bees.">
            <Select Mode="multiple"
                    DataSource="@_bees"
                    @bind-Values="@context.Bees"
                    LabelName="@nameof(BeeDto.Address)"
                    ValueName="@nameof(BeeDto.Address)"
                    Placeholder="Please select"
                    EnableSearch
                    AllowClear>
            </Select>
        </FormItem>
        <Divider />
        <Row Justify="end">
            <Col Span="4">
            <FormItem>
                <Button Type="@ButtonType.Primary" HtmlType="submit">Add</Button>
            </FormItem>
            </Col>
            <Col Span="4">
            <FormItem>
                <Button OnClick="@Cancel">Cancel</Button>
            </FormItem>
            </Col>
        </Row>
    </Form>
</Modal>
<Modal Title="@($"Confirm {_modalState.Purpose}")"
       Visible="@_modalState.IsVisible"
       OkText="@("Confirm")" OnOk="@_modalState.Accept"
       CancelText="@("Cancel")" OnCancel="@_modalState.Cancel">
    <p>Do you want to @_modalState.Purpose ?</p>
</Modal>

<AntDesign.Table TItem="BeehiveVM" DataSource="@_beehives" OnExpand="OnRowExpand">
    <ColumnDefinitions>
        <Column Title="Name" @bind-Field="@context.Name" Sortable />
        <Column Title="Max Parallel" @bind-Field="@context.MaxParallelTasks" Sortable />
        <Column Title="Nb Bees" Field="@Count(context.Bees)" Sortable />
        <ActionColumn>
            <Space>
                <SpaceItem><Button Danger OnClick="()=>RemoveBeehive(context.Name)">Delete</Button></SpaceItem>
            </Space>
        </ActionColumn>
    </ColumnDefinitions>
    <ExpandTemplate Context="rowData">
        <Table DataSource="rowData.Data.BeesVM" Loading="rowData.Data.BeesVM==null" TItem="BeeDto" HidePagination>
            <Column Title="OS" Field="@context.OS">
                <Image Preview=false Width="25px" Src="@GetOSImage(context.OS)" />
            </Column>
            <Column Title="Active" @bind-Field="@context.IsUp" Sortable>
                <Switch Value="@context.IsUp" Disabled />
            </Column>
            <Column Title="Name" @bind-Field="@context.Address" Sortable>
                <a href="@($"{context.Address}/swagger/index.html")" target="_blank">@context.Address</a>
            </Column>
            <Column Title="Cores %" @bind-Field="@context.PercentFreeCores" Sortable>
                <Progress Percent="@(Math.Round(100.0 - context.PercentFreeCores))" Type=ProgressType.Line StrokeColor=@GetColor(context.PercentFreeCores) />
            </Column>
            <Column Title="RAM %" @bind-Field="@context.PercentFreeMemory" Sortable>
                <Progress Percent="@(Math.Round(100.0 - @context.PercentFreeMemory, 2))" Type=ProgressType.Line StrokeColor="@GetColor(context.PercentFreeMemory)" />
            </Column>
            <Column Title="Disk %" @bind-Field="@context.PercentFreeDiskSpace" Sortable>
                <Progress Percent="@(Math.Round(100.0 - @context.PercentFreeDiskSpace, 2))" Type=ProgressType.Line StrokeColor=@GetColor(context.PercentFreeDiskSpace) />
            </Column>
        </Table>
    </ExpandTemplate>
</AntDesign.Table>


@code {
    bool _isVisible;
    BeehiveDto _model = new BeehiveDto();
    List<BeehiveVM> _beehives = new List<BeehiveVM>();
    List<BeeDto> _bees = new List<BeeDto>();
    private readonly ModalViewModel _modalState = new ModalViewModel();

    protected async override Task OnInitializedAsync()
    {
        _bees = await BeeKeeper.GetBeesAsync();
        _beehives = BeehiveProvider.GetBeehives().Select(p => new BeehiveVM(p)).ToList();
    }

    private void NewBeehive()
    {
        _isVisible = true;
    }

    private void Cancel()
    {
        _isVisible = false;
    }

    public void AddBeehive(EditContext context)
    {
        BeehiveProvider.CreateBeehive(_model);
        _isVisible = false;

        _beehives = BeehiveProvider.GetBeehives().Select(p => new BeehiveVM(p)).ToList();
        StateHasChanged();
    }

    public void AddBeehiveFailed(EditContext context)
    {

    }

    private void RemoveBeehive(string name)
    {
        _modalState.Purpose = $"delete {name}";
        _modalState.Show(() =>
        {
            BeehiveProvider.DeleteBeehive(name);

            _beehives = BeehiveProvider.GetBeehives().Select(p => new BeehiveVM(p)).ToList();
            StateHasChanged();
        });
    }

    private async Task OnRowExpand(RowData<BeehiveVM> rowData)
    {
        var bees = await BeeKeeper.GetBeesAsync() ?? new List<BeeDto>();

        var addresses = rowData.Data.Bees ?? Enumerable.Empty<string>();
        if (addresses.Any())
        {
            var map = bees.ToDictionary(p => p.Address, p => p);
            bees.Clear();
            bees.AddRange(addresses
                .Where(p => map.ContainsKey(p))
                .Select(p => map[p])
            );
        }

        rowData.Data.BeesVM = bees;
        StateHasChanged();
    }

    public void Dispose()
    {
    }

    int Count(IEnumerable<string> bees)
    {
        return bees == null || !bees.Any()
            ? _bees.Count
            : bees.Count();
    }

    string GetColor(double percentFree)
    {
        if (percentFree <= 10) return "#dc3545";
        if (percentFree <= 25) return "#fd7e14";
        return "#28a745";
    }

    string GetOSImage(string platform)
    {
        switch (platform)
        {
            case "Win32S":
            case "Win32Windows":
            case "Win32NT":
            case "WinCE":
                return "images/windows_microsoft_icon.png";
            case "Unix":
                return "images/tux_linux_icon.png";
            case "MacOSX":
                return "images/mac_osx_icon.png";
            case "Xbox":
                return "images/xbox_icon.png";
            default:
                return "images/server_center_data_icon.png";
        }
    }

    public class BeehiveVM : BeehiveDto
    {
        public BeehiveVM(BeehiveDto dto)
        {
            Name = dto.Name;
            MaxParallelTasks = dto.MaxParallelTasks;
            Bees = dto.Bees;
        }

        public List<BeeDto> BeesVM { get; set; }
    }
}
