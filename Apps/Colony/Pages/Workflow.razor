@page "/workflow/{id:guid}"

@using AntDesign
@using AntDesign.TableModels
@using Application;
@using Application.Colony
@using Blazor.Diagrams.Core;
@using Blazor.Diagrams.Components;
@using Blazor.Diagrams.Core.Models.Base;
@using Honey.Components;
@using Domain.Dtos.Workflows;
@using Domain.ViewModels;
@using Application.Honey;

@inject WorkflowRepository WorkflowRepository
@inject Colony Colony
@inject NavigationManager Navigation
@inject ITimer Timer

<div>
    <h3>@_workflow.Name</h3>
    <Tag class="@_workflow?.ToCssClass()">@_workflow.Status</Tag>
    <Text Type="secondary">@_workflow?.Id</Text>
    <Divider />
    <Space>
        <SpaceItem>
            <Button OnClick="Cancel" Disabled="@(!_workflow.CanCancel)">Cancel</Button>
        </SpaceItem>
        <SpaceItem>
            <Button OnClick="Recover" Disabled="@(!_workflow.CanRecover)">Recover</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Danger OnClick="Delete" Disabled="@(!_workflow.CanDelete)">Delete</Button>
        </SpaceItem>
    </Space>
    <Divider />
</div>

<Modal Title="@($"Confirm {_modalState.Purpose}")"
       Visible="@_modalState.IsVisible"
       OkText="@("Confirm")" OnOk="@_modalState.Accept"
       CancelText="@("Cancel")" OnCancel="@_modalState.Cancel">
    <p>Do you want to @_modalState.Purpose ?</p>
</Modal>

<AntDesign.Tabs Animated>
    <TabPane Tab="Nodes">
        <Table DataSource="_jobs" TItem="JobViewModel" TreeChildren="p => p.Children"
               RowClassName="@(x => x.Data.ToCssClass())" OnRowClick="OnRowClick" HidePagination>
            <Column Title="Name" Field="@context.Name" Sortable Filterable />
            <Column Title="Type" Field="@context.Type" Sortable Filterable />
            <Column Title="Progress" @bind-Field="@context.Progress" Sortable>
                <Progress Percent="@context.Progress" Status="@context.ToProgressStatus()" Format="_progressFormat" />
            </Column>
            <Column Title="Start" Field="@context.StartTime" Format="yyyy-MM-dd HH:mm:ss" Sortable Hidden />
            <Column Title="Duration" Field="@context.Duration" Format="dd\.hh\:mm\:ss" Sortable />
            <Column Title="Duration" Field="@context.Duration" Format="dd\.hh\:mm\:ss" Sortable />
            <ActionColumn>
                <Button Shape="@ButtonShape.Circle" Icon="@IconType.Outline.UnorderedList" OnClick="()=>GoToMessages(context)" OnClickStopPropagation />
            </ActionColumn>
        </Table>
    </TabPane>
    <TabPane Tab="Graph" ForceRender>
        @*<div style="width: 100vw; height: 100vh">*@
        <div style="height: 100vh">
            <CascadingValue Value="Diagram">
                <DiagramCanvas></DiagramCanvas>
            </CascadingValue>
        </div>
    </TabPane>
</AntDesign.Tabs>

<Drawer Width="400" Closable Visible="@_isDrawerVisible" Title='("Task details")' OnClose="@(_ => CloseDrawer())">
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Name:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.Name</Text>
        </Col>
    </Row>
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Id:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.Id</Text>
        </Col>
    </Row>
    <Divider />
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Host:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.Host</Text>
        </Col>
    </Row>
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Host Id:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.BeeTaskId</Text>
        </Col>
    </Row>
    <Divider />
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Command:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.Command</Text>
        </Col>
    </Row>
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Arguments:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.Arguments</Text>
        </Col>
    </Row>
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Nb Cores:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.NbCores</Text>
        </Col>
    </Row>
    <Divider />
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Status:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.Status</Text>
        </Col>
    </Row>
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Start:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.StartTime</Text>
        </Col>
    </Row>
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Duration:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.Duration</Text>
        </Col>
    </Row>
    <Row Gutter="16">
        <Col Span="6">
        <Text Strong="true">Progress:</Text>
        </Col>
        <Col Span="10">
        <Text>@_selectedJob.Progress</Text>
        </Col>
    </Row>
</Drawer>

<style>
    .job-pending {
        color: #818182;
        background-color: #fefefe;
        border-color: #fdfdfe;
    }

    .job-running {
        color: #0c5460;
        background-color: #d1ecf1;
        border-color: #bee5eb;
    }

    .job-completed {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .job-cancel {
        color: #856404;
        background-color: #fff3cd;
        border-color: #ffeeba;
    }

    .job-error {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .job-deleted {
        color: #1b1e21;
        background-color: #d6d8d9;
        border-color: #c6c8ca;
    }
</style>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private readonly JobViewModel[] _jobs = new JobViewModel[1] { JobViewModel.Empty };
    private readonly Func<double, string> _progressFormat = p => $"{Math.Round(p, 2)}";
    private readonly ModalViewModel _modalState = new ModalViewModel();
    private WorkflowViewModel _workflow;

    private Diagram Diagram { get; } = new Diagram();
    private bool _isDrawerVisible;
    private HostedJobViewModel _selectedJob = HostedJobViewModel.Empty;

    public Workflow()
    {
        var options = new DiagramOptions
        {
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
                                        //EnableVirtualization = true,
            Links = new DiagramLinkOptions
            {
                // Options related to links
            },
            Zoom = new DiagramZoomOptions
            {
                //Minimum = 0.5, // Minimum zoom value
                Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
                                    // Other
            }
        };

        Diagram = new Diagram(options);
        Diagram.RegisterModelComponent<JobNodeModel, JobNodeComponent>();
    }

    protected async override Task OnParametersSetAsync()
    {
        _workflow = WorkflowRepository.GetWorkflow(Id);
        if (_workflow == null)
            // Todo: Redicrect to Not found
            ;
        _jobs[0] = WorkflowRepository.GetWorkflowJobs(Id);

        Diagram.Batch(() => Diagram.BuildGraph(_jobs[0]));

        Diagram.SelectionChanged -= OnNodeSelected;
        Diagram.SelectionChanged += OnNodeSelected;

        Timer.Updated -= OnTimerTick;
        Timer.Updated += OnTimerTick;

        await base.OnParametersSetAsync();
    }

    private void Cancel()
    {
        _modalState.Purpose = "cancel";
        _modalState.Show(async () => await Colony.CancelAsync(Id));
    }

    private void Recover()
    {
        _modalState.Purpose = "recover";
        _modalState.Show(async () => await Colony.RecoverAsync(Id));
    }

    private void Delete()
    {
        _modalState.Purpose = "delete";
        _modalState.Show(async () =>
        {
            await Colony.DeleteAsync(Id);
            Navigation.NavigateTo("workflows");
        });
    }

    private void OnNodeSelected(SelectableModel model)
    {
        if (model is not JobNodeModel node)
            return;
        OnSelect(node.Job);
    }

    private void GoToMessages(JobViewModel job)
    {
        if (job is HostedJobViewModel hJob)
            Navigation.NavigateTo($"/workflow/{_workflow.Id}/{hJob.ColonyTaskId}");
    }

    private void OnRowClick(RowData<JobViewModel> rowData) => OnSelect(rowData.Data);

    private void OnSelect(JobViewModel job)
    {
        if (!job.HasDetails())
            return;

        _selectedJob = job.Details();
        _isDrawerVisible = true;

        StateHasChanged();
    }

    private void CloseDrawer()
    {
        _isDrawerVisible = false;
        _selectedJob = HostedJobViewModel.Empty;
        StateHasChanged();
    }

    private void OnTimerTick() => InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        Timer.Updated -= OnTimerTick;
    }
}
